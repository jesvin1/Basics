{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Forex_Auto_Trading _FXCM_Basics.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOwCvr60LQhtXzYZVVoEfZT",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jesvin1/Udemy_Algo_Trading/blob/master/Forex_Auto_Trading__FXCM_Basics.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-ceZXtZowQ9E",
        "colab_type": "text"
      },
      "source": [
        "# Importing Package and Explanation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2lg33KDnv0SE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "outputId": "9b3a6211-943b-4e85-9954-8b064791bfc7"
      },
      "source": [
        "# =============================================================================\n",
        "# FXCM API testing\n",
        "# Author : Mayank Rasu\n",
        "\n",
        "# Please report bug/issues in the Q&A section\n",
        "# =============================================================================\n",
        "#!pip install fxcmpy\n",
        "\n",
        "!pip install flask-socketio\n"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting flask-socketio\n",
            "  Downloading https://files.pythonhosted.org/packages/8a/fa/ea1df958bd76a4a55b20dd87593839adf893e1fae0095b449fecdf325f21/Flask_SocketIO-4.3.1-py2.py3-none-any.whl\n",
            "Requirement already satisfied: Flask>=0.9 in /usr/local/lib/python3.6/dist-packages (from flask-socketio) (1.1.2)\n",
            "Collecting python-socketio>=4.3.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/3d/97/00741edd49788510b834b60a1a4d0afb2c4942770c11b8e0f6e914371718/python_socketio-4.6.0-py2.py3-none-any.whl (51kB)\n",
            "\u001b[K     |████████████████████████████████| 61kB 3.4MB/s \n",
            "\u001b[?25hRequirement already satisfied: Jinja2>=2.10.1 in /usr/local/lib/python3.6/dist-packages (from Flask>=0.9->flask-socketio) (2.11.2)\n",
            "Requirement already satisfied: itsdangerous>=0.24 in /usr/local/lib/python3.6/dist-packages (from Flask>=0.9->flask-socketio) (1.1.0)\n",
            "Requirement already satisfied: click>=5.1 in /usr/local/lib/python3.6/dist-packages (from Flask>=0.9->flask-socketio) (7.1.2)\n",
            "Requirement already satisfied: Werkzeug>=0.15 in /usr/local/lib/python3.6/dist-packages (from Flask>=0.9->flask-socketio) (1.0.1)\n",
            "Collecting python-engineio>=3.13.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/40/c8/793f17fe91343d70f76ad2bf6eac4e8c2d00c3c3ccb5173f18bc9938523e/python_engineio-3.13.1-py2.py3-none-any.whl (49kB)\n",
            "\u001b[K     |████████████████████████████████| 51kB 5.7MB/s \n",
            "\u001b[?25hRequirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.6/dist-packages (from python-socketio>=4.3.0->flask-socketio) (1.15.0)\n",
            "Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.6/dist-packages (from Jinja2>=2.10.1->Flask>=0.9->flask-socketio) (1.1.1)\n",
            "Installing collected packages: python-engineio, python-socketio, flask-socketio\n",
            "Successfully installed flask-socketio-4.3.1 python-engineio-3.13.1 python-socketio-4.6.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "srOyq38ZxDX5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import fxcmpy\n",
        "import time"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_MbzjIeWwZ6g",
        "colab_type": "text"
      },
      "source": [
        "# Initialization"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6FWumRFkwZIP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#initiating API connection and defining trade parameters\n",
        "token = \"\"\n",
        "con = fxcmpy.fxcmpy(access_token = token, log_level = 'error', server='demo')\n",
        "pair = 'EUR/USD'"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d9oXnWy0y56A",
        "colab_type": "text"
      },
      "source": [
        "\n",
        "#Get historical data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BPL3Bm00y5L_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "fa662fdd-6a13-4951-ef26-b71a7cbcb81d"
      },
      "source": [
        "data = con.get_candles(pair, period='m5', number=250)\n",
        "\"\"\"periods can be m1, m5, m15 and m30, H1, H2, H3, H4, H6 and H8, D1, W1, M1\"\"\""
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'periods can be m1, m5, m15 and m30, H1, H2, H3, H4, H6 and H8, D1, W1, M1'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KXPVoRWSzK8i",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 225
        },
        "outputId": "f62930a1-53e8-4a82-eafb-77e9b7d1a18a"
      },
      "source": [
        "data = con.get_candles(pair, period='D1', number=250)\n",
        "\"\"\"periods can be m1, m5, m15 and m30, H1, H2, H3, H4, H6 and H8, D1, W1, M1\"\"\"\n",
        "\n",
        "data['Open'] = (data['bidopen']+data['askopen'])/2\n",
        "data['High'] = (data['bidhigh']+data['askhigh'])/2\n",
        "data['Low'] = (data['bidlow']+data['asklow'])/2\n",
        "data['Close'] = (data['bidclose']+data['askclose'])/2\n",
        "data.index.names = ['Date']\n",
        "df = data[['Open','High','Low','Close']]\n",
        "df.head()\n",
        "#df['Date'] = pd.to_datetime(df.index)\n",
        "#df['Date'] = df['Date'].apply(mpl_dates.date2num)\n",
        "#df = df.loc[:,['Date', 'Open', 'High', 'Low', 'Close']]"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-10-13 21:00:00</th>\n",
              "      <td>1.103815</td>\n",
              "      <td>1.104295</td>\n",
              "      <td>1.103100</td>\n",
              "      <td>1.103225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-10-14 21:00:00</th>\n",
              "      <td>1.103225</td>\n",
              "      <td>1.104285</td>\n",
              "      <td>1.101270</td>\n",
              "      <td>1.102585</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-10-15 21:00:00</th>\n",
              "      <td>1.102585</td>\n",
              "      <td>1.104615</td>\n",
              "      <td>1.099135</td>\n",
              "      <td>1.103295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-10-16 21:00:00</th>\n",
              "      <td>1.103295</td>\n",
              "      <td>1.108560</td>\n",
              "      <td>1.102245</td>\n",
              "      <td>1.107165</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-10-17 21:00:00</th>\n",
              "      <td>1.107165</td>\n",
              "      <td>1.113985</td>\n",
              "      <td>1.106510</td>\n",
              "      <td>1.112445</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                         Open      High       Low     Close\n",
              "Date                                                       \n",
              "2019-10-13 21:00:00  1.103815  1.104295  1.103100  1.103225\n",
              "2019-10-14 21:00:00  1.103225  1.104285  1.101270  1.102585\n",
              "2019-10-15 21:00:00  1.102585  1.104615  1.099135  1.103295\n",
              "2019-10-16 21:00:00  1.103295  1.108560  1.102245  1.107165\n",
              "2019-10-17 21:00:00  1.107165  1.113985  1.106510  1.112445"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lEKh4fj94FYw",
        "colab_type": "text"
      },
      "source": [
        "# Support and resistance script"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9iYuFs8n0lGI",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 319
        },
        "outputId": "c1a2154b-e02c-4302-c7c6-9c06a92c08ca"
      },
      "source": [
        "#installing package using pip\n",
        "#!pip install yfinance\n",
        "!pip install mpl_finance\n",
        "\n",
        "#Importing Packages and setting global parameters\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "#import yfinance\n",
        "from mpl_finance import candlestick_ohlc\n",
        "import matplotlib.dates as mpl_dates\n",
        "import matplotlib.pyplot as plt\n",
        "plt.rcParams['figure.figsize'] = [12, 7]\n",
        "plt.rc('font', size=14)\n",
        "\n",
        "#Getting Data for processing\n",
        "#name = 'SPY'\n",
        "#ticker = yfinance.Ticker(name)\n",
        "#df = ticker.history(interval=\"1d\",start=\"2020-03-15\", end=\"2020-07-15\")\n",
        "data = con.get_candles(pair, period='D1', number=250)\n",
        "\"\"\"periods can be m1, m5, m15 and m30, H1, H2, H3, H4, H6 and H8, D1, W1, M1\"\"\"\n",
        "data['Open'] = (data['bidopen']+data['askopen'])/2\n",
        "data['High'] = (data['bidhigh']+data['askhigh'])/2\n",
        "data['Low'] = (data['bidlow']+data['asklow'])/2\n",
        "data['Close'] = (data['bidclose']+data['askclose'])/2\n",
        "data.index.names = ['Date']\n",
        "df = data[['Open','High','Low','Close']]\n",
        "df['Date'] = pd.to_datetime(df.index)\n",
        "df['Date'] = df['Date'].apply(mpl_dates.date2num)\n",
        "df = df.loc[:,['Date', 'Open', 'High', 'Low', 'Close']]\n",
        "\n",
        "#Defining functions for the support and resistance\n",
        "def isSupport(df,i):\n",
        "  support = df['Low'][i] < df['Low'][i-1]  and df['Low'][i] < df['Low'][i+1] and df['Low'][i+1] < df['Low'][i+2] and df['Low'][i-1] < df['Low'][i-2]\n",
        "  return support\n",
        "def isResistance(df,i):\n",
        "  resistance = df['High'][i] > df['High'][i-1]  and df['High'][i] > df['High'][i+1] and df['High'][i+1] > df['High'][i+2] and df['High'][i-1] > df['High'][i-2]\n",
        "  return resistance\n",
        "\n",
        "#Finding the level\n",
        "levels = []\n",
        "for i in range(2,df.shape[0]-2):\n",
        "  if isSupport(df,i):\n",
        "    levels.append((i,df['Low'][i]))\n",
        "  elif isResistance(df,i):\n",
        "    levels.append((i,df['High'][i]))\n",
        "\n",
        "#Defining Plot function\n",
        "def plot_all():\n",
        "  fig, ax = plt.subplots()\n",
        "  candlestick_ohlc(ax,df.values,width=0.6, \\\n",
        "                   colorup='green', colordown='red', alpha=0.8)\n",
        "  date_format = mpl_dates.DateFormatter('%d %b %Y')\n",
        "  ax.xaxis.set_major_formatter(date_format)\n",
        "  fig.autofmt_xdate()\n",
        "  fig.tight_layout()\n",
        "  for level in levels:\n",
        "    plt.hlines(level[1],xmin=df['Date'][level[0]],\\\n",
        "               xmax=max(df['Date']),colors='blue')\n",
        "  fig.show()\n",
        "\n",
        "#Reducing number of support and resistance lines\n",
        "s =  np.mean(df['High'] - df['Low'])\n",
        "def isFarFromLevel(l):\n",
        "   return np.sum([abs(l-x) < s  for x in levels]) == 0\n",
        "levels = []\n",
        "for i in range(2,df.shape[0]-2):\n",
        "  if isSupport(df,i):\n",
        "    l = df['Low'][i]\n",
        "    if isFarFromLevel(l):\n",
        "      levels.append((i,l))\n",
        "  elif isResistance(df,i):\n",
        "    l = df['High'][i]\n",
        "    if isFarFromLevel(l):\n",
        "      levels.append((i,l))"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: mpl_finance in /usr/local/lib/python3.6/dist-packages (0.10.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from mpl_finance) (3.2.2)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mpl_finance) (1.2.0)\n",
            "Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mpl_finance) (1.18.5)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mpl_finance) (2.4.7)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mpl_finance) (2.8.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mpl_finance) (0.10.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.1->matplotlib->mpl_finance) (1.15.0)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:27: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:28: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SK8ElmyH9JMv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 505
        },
        "outputId": "ccb68eb9-06bd-498b-d8b6-655489363495"
      },
      "source": [
        "plot_all()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x504 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
